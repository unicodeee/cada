generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  Male
  Female
  Other
}

model User {
  id            String             @id @default(uuid()) @db.Uuid
  name          String
  email         String             @unique
  phone         String?
  avatar        String?            @map("avatar_photo_url")
  profiles      Profile?
  preferences   Preference?
  swipes        Swipe[]            @relation("Swiper")
  swiped        Swipe[]            @relation("Swiped")
  messages      Message[]
  studySessions UserStudySession[]
  matches1      Match[]            @relation("User1")
  matches2      Match[]            @relation("User2")

  StudySession StudySession[]
}

model Profile {
  id                String   @id @default(uuid()) @db.Uuid
  userId            String   @unique
  gender            Gender?
  hobbies           String[]
  description       String?
  yearBorn          Int?
  sexualOrientation String?
  photos            String[]
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Preference {
  id               String  @id @default(uuid()) @db.Uuid
  userId           String  @unique
  genderPreference String?
  minAge           Int?
  maxAge           Int?
  user             User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Swipe {
  id         String   @id @default(uuid()) @db.Uuid
  swiperId   String
  swipedId   String
  dateAt     DateTime @default(now())
  swipeRight Boolean
  swiper     User     @relation("Swiper", fields: [swiperId], references: [id], onDelete: Cascade)
  swiped     User     @relation("Swiped", fields: [swipedId], references: [id], onDelete: Cascade)

  @@unique([swiperId, swipedId])
}

model Match {
  id               String            @id @default(uuid()) @db.Uuid
  user1Id          String
  user2Id          String
  dateCreated      DateTime          @default(now())
  user1            User              @relation("User1", fields: [user1Id], references: [id], onDelete: Cascade)
  user2            User              @relation("User2", fields: [user2Id], references: [id], onDelete: Cascade)
  Message          Message[]
  UnmatchCountdown UnmatchCountdown?

  @@unique([user1Id, user2Id])
}

model UnmatchCountdown {
  id        String   @id @default(uuid()) @db.Uuid
  matchId   String
  expiresAt DateTime
  match     Match    @relation(fields: [matchId], references: [id], onDelete: Cascade)

  @@unique([matchId])
}

enum MessageType {
  Media
  Text
  Icon
}

model Message {
  id       String      @id @default(uuid()) @db.Uuid
  content  String
  userId   String
  dateSent DateTime    @default(now())
  type     MessageType
  matchId  String
  user     User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  match    Match       @relation(fields: [matchId], references: [id], onDelete: Cascade)
}

model SchoolEvent {
  id          String   @id @default(uuid()) @db.Uuid
  description String
  time        DateTime
  date        DateTime
  photoUrl    String?  @map("photo_url")
}

model StudySession {
  id          String             @id @default(uuid()) @db.Uuid
  location    String
  eventTime   DateTime // Consolidated time and date
  createdById String?
  createdBy   User?              @relation(fields: [createdById], references: [id], onDelete: SetNull)
  users       UserStudySession[]
}

model UserStudySession {
  userId         String       @db.Uuid
  studySessionId String       @db.Uuid
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  studySession   StudySession @relation(fields: [studySessionId], references: [id], onDelete: Cascade)

  @@id([userId, studySessionId])
}
